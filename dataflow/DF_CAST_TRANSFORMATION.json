{
	"name": "DF_CAST_TRANSFORMATION",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_SOURCE_EMPLOYEES2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_SINK_GOODROWS_EMPLOYEES2",
						"type": "DatasetReference"
					},
					"name": "sinkGoodData"
				},
				{
					"dataset": {
						"referenceName": "DS_SINK_BADROWS_EMPLOYEES2",
						"type": "DatasetReference"
					},
					"name": "sinkBadRows"
				}
			],
			"transformations": [
				{
					"name": "cast1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          gender as string,",
				"          doj as string,",
				"          depid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 cast(output(",
				"          empid as integer,",
				"          doj as date 'dd/MM/yyyy',",
				"          depid as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 split(!isError(),",
				"     disjoint: false) ~> split1@(goodRows, badRows)",
				"split1@goodRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Employees2_Goodrows.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkGoodData",
				"split1@badRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Employees2_badrows.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkBadRows"
			]
		}
	}
}